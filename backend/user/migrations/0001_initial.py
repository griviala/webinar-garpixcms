# Generated by Django 3.2.22 on 2023-10-30 16:11

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import garpix_notify.mixins.user_notify_mixin
import garpix_user.mixins.models.confirm.code_length_mixin
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Запись удалена')),
                ('telegram_chat_id', models.CharField(blank=True, default='', max_length=200, verbose_name='Telegram ID пользователя/чата')),
                ('telegram_secret', models.CharField(default=garpix_notify.mixins.user_notify_mixin.generate_uuid, max_length=150, unique=True, verbose_name='Ключ подключения Telegram')),
                ('viber_chat_id', models.CharField(blank=True, default='', max_length=200, verbose_name='Viber ID пользователя/чата')),
                ('viber_secret_key', models.CharField(blank=True, default='', max_length=200, verbose_name='Ключ подключения Viber')),
                ('phone_confirmation_code', models.CharField(blank=True, max_length=15, null=True, verbose_name='Код подтверждения номера телефона')),
                ('phone_code_send_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата отправления кода')),
                ('phone_confirmed_date', models.DateTimeField(blank=True, null=True, verbose_name='Date phone was confirmed')),
                ('new_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, unique=True, verbose_name='Новый номер телефона')),
                ('email_confirmation_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='Код подтверждения email')),
                ('email_code_send_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата отправления кода')),
                ('email_confirmed_date', models.DateTimeField(blank=True, null=True, verbose_name='Date email was confirmed')),
                ('new_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Новый email')),
                ('is_email_confirmed', models.BooleanField(default=True, verbose_name='Email подтвержден')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, default='', max_length=128, region=None, verbose_name='Номер телефона')),
                ('is_phone_confirmed', models.BooleanField(default=True, verbose_name='Номер телефона подтвержден')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            bases=(garpix_user.mixins.models.confirm.code_length_mixin.CodeLengthMixin, models.Model),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
